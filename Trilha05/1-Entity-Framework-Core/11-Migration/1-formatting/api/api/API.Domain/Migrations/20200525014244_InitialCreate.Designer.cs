// <auto-generated />
using System;
using API.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Domain.Data.Migrations
{
    [DbContext(typeof(DomainContext))]
    [Migration("20200525014244_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Domain.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ACT_ID")
                        .HasColumnType("int");

                    b.Property<int>("ActionTypeId")
                        .HasColumnName("ATY_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("ACT_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ACT_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnName("ACT_DATE")
                        .HasColumnType("datetime");

                    b.Property<decimal>("InitialBid")
                        .HasColumnName("ACT_INITIAL_BID")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PropertyId")
                        .HasColumnName("PRO_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("ACT_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnName("USE_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("ACTION");
                });

            modelBuilder.Entity("API.Domain.Entities.ActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATY_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("ATY_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ATY_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("ATY_DESCRIPTION")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("ATY_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ACTION_TYPE");
                });

            modelBuilder.Entity("API.Domain.Entities.Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BID_ID")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnName("ACT_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("BID_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BID_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnName("BID_DATE")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("BID_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Value")
                        .HasColumnName("BID_VALUE")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("BID");
                });

            modelBuilder.Entity("API.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CIT_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("CIT_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CIT_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("CIT_DATE")
                        .HasColumnType("varchar(180)")
                        .HasMaxLength(180);

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("CIT_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("CITY");
                });

            modelBuilder.Entity("API.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CUS_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("CUS_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CUS_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("CUS_DESCRIPTION")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("CUS_EMAIL")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("CUS_NAME")
                        .HasColumnType("varchar(180)")
                        .HasMaxLength(180);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("CUS_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CUSTOMER");
                });

            modelBuilder.Entity("API.Domain.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRF_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("PRF_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRF_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("PRF_DESCRIPTION")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("PRF_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PROFILE");
                });

            modelBuilder.Entity("API.Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRO_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("PRO_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("PRO_ADDRESS")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<decimal>("Area")
                        .HasColumnName("PRO_AREA")
                        .HasColumnType("decimal(11,4)");

                    b.Property<decimal>("BaseValue")
                        .HasColumnName("PRO_BASE_VALUE")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnName("PRO_CEP")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("CityId")
                        .HasColumnName("CIT_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRO_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("PRO_DESCRIPTION")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300);

                    b.Property<decimal>("Latitude")
                        .HasColumnName("PRO_LATITUDE")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal>("Longitude")
                        .HasColumnName("PRO_LONGITUDE")
                        .HasColumnType("decimal(10,8)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnName("PRO_NUMBER")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhotosPath")
                        .HasColumnName("PRO_PHOTOS_PATH")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("PropertyTypeId")
                        .HasColumnName("PRT_ID")
                        .HasColumnType("int");

                    b.Property<string>("StreetViewUrl")
                        .HasColumnName("PRO_STREET_VIEW_URL")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("PRO_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnName("USE_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PROPERTY");
                });

            modelBuilder.Entity("API.Domain.Entities.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRT_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("PRT_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PRT_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("PRT_DESCRIPTION")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("PRT_TYPE")
                        .HasColumnType("varchar(180)")
                        .HasMaxLength(180);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("PRT_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PROPERTY_TYPE");
                });

            modelBuilder.Entity("API.Domain.Entities.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RES_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("RES_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RES_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("RES_DESCRIPTION")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300);

                    b.Property<int>("PropertyId")
                        .HasColumnName("PRO_ID")
                        .HasColumnType("int");

                    b.Property<int>("ResourceTypeId")
                        .HasColumnName("RET_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("RES_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Value")
                        .HasColumnName("RES_VALUE")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("RESOURCE");
                });

            modelBuilder.Entity("API.Domain.Entities.ResourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RET_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("RET_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RET_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("RET_DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("RET_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("RESOURCE_TYPE");
                });

            modelBuilder.Entity("API.Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STA_ID")
                        .HasColumnType("int");

                    b.Property<string>("Abreviation")
                        .IsRequired()
                        .HasColumnName("STA_ABREVIATION")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2);

                    b.Property<bool>("Active")
                        .HasColumnName("STA_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("STA_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("STA_DATE")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("STA_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("STATE");
                });

            modelBuilder.Entity("API.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_ID")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnName("USE_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Birth")
                        .HasColumnName("USE_BIRTH")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("USE_CPF")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USE_CREATED_AT")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("USE_DESCRIPTION")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("USE_EMAIL")
                        .HasColumnType("varchar(180)")
                        .HasMaxLength(180);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("USE_name")
                        .HasColumnType("varchar(180)")
                        .HasMaxLength(180);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("USE_PASSWORD")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PhotoFront")
                        .HasColumnName("USE_PHOTO_FRONT")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("ProfileId")
                        .HasColumnName("PRF_ID")
                        .HasColumnType("int");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnName("USE_RG")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("USE_UPDATE_AT")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("USER");
                });

            modelBuilder.Entity("API.Domain.Entities.Action", b =>
                {
                    b.HasOne("API.Domain.Entities.ActionType", "ActionType")
                        .WithMany("Actions")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Entities.Property", "Property")
                        .WithMany("Actions")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Entities.User", "User")
                        .WithMany("Actions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.Entities.Bid", b =>
                {
                    b.HasOne("API.Domain.Entities.Action", "Action")
                        .WithMany("Bids")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.Entities.City", b =>
                {
                    b.HasOne("API.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.Entities.Property", b =>
                {
                    b.HasOne("API.Domain.Entities.City", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Entities.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Entities.User", "User")
                        .WithMany("Properties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.Entities.Resource", b =>
                {
                    b.HasOne("API.Domain.Entities.Property", "Property")
                        .WithMany("Resources")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Domain.Entities.ResourceType", "ResourceType")
                        .WithMany("Resources")
                        .HasForeignKey("ResourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Domain.Entities.User", b =>
                {
                    b.HasOne("API.Domain.Entities.Profile", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
